#!/usr/bin/env python3
import sys
import math
import json

import sh
import tabulate


def fetch_gpustat(servers):
    results = {}
    servers = list(reversed(servers))
    while servers:
        s = servers.pop()
        try:
            result = sh.ssh(s, '~/.local/bin/gpustat', '--json')
            results[s] = json.loads(result.stdout)
        except sh.ErrorReturnCode as e:
            results[s] = {'error': e}
            # sh.ssh(
            #     s, '~/.local/bin/pip', 'install', '--user', 'gpustat',
            #     _out=sys.stdout)
            # servers.append(s)
    return results


def gpu_name(name):
    if 'V100' in name:
        return 'v100'
    if 'A100' in name:
        return 'a100'
    if '3080 Ti' in name:
        return '3080ti'
    if '3090' in name:
        return '3090'
    return '?'


def unit(value):
    if value < 1024:
        return '0MB'
    units = 'MGTP'
    base = math.floor(math.log(value, 1024))
    value /= math.pow(1024, base)
    return f'{value:5.2f}{units[base]}B'


def format_processes(procs):
    users = set(p['username'] for p in procs)
    text = []
    for u in users:
        m = sum(p['gpu_memory_usage'] for p in procs if p['username'] == u)
        text.append(f'{u}({unit(m).strip()})')
    return ', '.join(text)


def format_table(servers):
    results = fetch_gpustat(servers)
    lines = []
    for server, server_result in results.items():
        if 'error' in server_result:
            error = server_result['error'].stderr.decode().splitlines()[-1]
            print(f'{server}: {error}')
            lines.append([server, 'error'])
            continue
        for gpu in server_result['gpus']:
            line = [
                f'{server}.{gpu["index"]}',
                gpu_name(gpu["name"]),
                f'{gpu["utilization.gpu"]}%',
                f'{unit(gpu["memory.used"])}',
                f'{unit(gpu["memory.total"])}',
                format_processes(gpu["processes"])]
            lines.append(line)
    return lines


def main():
    servers = sys.argv[1:]
    if not servers:
        print('No servers specified.')
        sys.exit(-1)
    table = format_table(servers)
    headers = ('Server', 'GPU', 'Usage', 'Used', 'Total', 'Users')
    colalign = ('right', 'left') + ('right', ) * 3 + ('left', )
    table = tabulate.tabulate(table, headers=headers, colalign=colalign)
    print(table)


if __name__ == '__main__':
    main()

